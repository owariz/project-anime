generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  roles AccountRole[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AccountRole {
  accountId Int
  roleId    Int

  account   Account @relation(fields: [accountId], references: [id])
  role      Role    @relation(fields: [roleId], references: [id])

  @@id([accountId, roleId])
}

model Role {
  id    Int      @id @default(autoincrement())
  name  String   @unique
  accounts AccountRole[]
}

model Anime {
  id              Int       @id @default(autoincrement())
  animeId         String    @unique
  title           String
  description     String    @db.Text
  thumbnail       String?
  tag             String?
  episodes        Episode[]
  views           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Episode {
  id            Int      @id @default(autoincrement())
  episodeNumber Int
  title         String?
  video         String
  status        String?  // เพิ่มฟิลด์นี้เพื่อเก็บสถานะ
  releaseDate   DateTime
  views         Int      @default(0)
  anime         Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId       Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([animeId, episodeNumber])
}